1:複数の機能がある関数
  一つの関数には一つの機能を持たせよう
  保守性・可読性の低下につながります

2:不要なコードを削除していない
  不要となった関数やクラスを放置したり、コメントアウトしてはいけない
  これも保守性・可読性に繋がります

3:例外処理を行っていない
  エラーの原因の修正に役立ちます

4:マジックナンバーの使用
  数値をそのままで計算せずに、一度分かりやすい名前の付いた変数に入れて計算する
  保守性・可読性の向上に繋がる

5:組み込み関数に代入
  組み込み関数と同じ名前の変数を作らない
  組み込み関数が機能しなくなる

6:境界値で上手く動作しない
    テストケースを用意しミスを防ぐことが重要です

7:オリジナリティのあるコード
    可読性を下げる
    リストの作成コードなどの記述ルール

8:ネストが深い
    構造が複雑になり分かりにくい
    早期return
    内包表記、三項演算子を使う。しかし、かえって可読性を下げる可能性もあるので注意

9:クラスや関数を使用していない
    コードの中でクラスや関数にできるものがあるかどうか常にチェックしよう
    コードの重複を減らせる
    最低限のコード追加ですむ
    ミスを防げる
    便利

10:識別子の命名が雑
    職場の命名規則に従って名前をつける
    長くなっても分かりやすい名前をつける
    同志から始まることが好ましい

11:実行時間・計算量を考えない
    どの処理が早くなるか少しづつ覚えていこう

12:適切でないコメント
    必要なコメント・必要のないコメント知る
    必要なコメント
      コードを見れば和k流コメント
      ひどいコードを補うためのコメント
    必要なコメント
      修正するべき点
      普通の違う書き方の場合と原因
      参考にしたページのURL
      上手くいかなかったときの方法

13:ミュータブルなのかイミュータブルなのかを考えていない
    ミュータブルなオブジェクトを代入した時に、代入先を変更したら代入元も変更してしまう

